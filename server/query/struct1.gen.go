// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flipped-aurora/gin-vue-admin/server/model/package1"
)

func newStruct1(db *gorm.DB, opts ...gen.DOOption) struct1 {
	_struct1 := struct1{}

	_struct1.struct1Do.UseDB(db, opts...)
	_struct1.struct1Do.UseModel(&package1.Struct1{})

	tableName := _struct1.struct1Do.TableName()
	_struct1.ALL = field.NewAsterisk(tableName)
	_struct1.ID = field.NewUint(tableName, "id")
	_struct1.CreatedAt = field.NewTime(tableName, "created_at")
	_struct1.UpdatedAt = field.NewTime(tableName, "updated_at")
	_struct1.DeletedAt = field.NewField(tableName, "deleted_at")
	_struct1.Field1 = field.NewField(tableName, "field1")

	_struct1.fillFieldMap()

	return _struct1
}

type struct1 struct {
	struct1Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Field1    field.Field

	fieldMap map[string]field.Expr
}

func (s struct1) Table(newTableName string) *struct1 {
	s.struct1Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s struct1) As(alias string) *struct1 {
	s.struct1Do.DO = *(s.struct1Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *struct1) updateTableName(table string) *struct1 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Field1 = field.NewField(table, "field1")

	s.fillFieldMap()

	return s
}

func (s *struct1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *struct1) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["field1"] = s.Field1
}

func (s struct1) clone(db *gorm.DB) struct1 {
	s.struct1Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s struct1) replaceDB(db *gorm.DB) struct1 {
	s.struct1Do.ReplaceDB(db)
	return s
}

type struct1Do struct{ gen.DO }

type IStruct1Do interface {
	gen.SubQuery
	Debug() IStruct1Do
	WithContext(ctx context.Context) IStruct1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStruct1Do
	WriteDB() IStruct1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStruct1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStruct1Do
	Not(conds ...gen.Condition) IStruct1Do
	Or(conds ...gen.Condition) IStruct1Do
	Select(conds ...field.Expr) IStruct1Do
	Where(conds ...gen.Condition) IStruct1Do
	Order(conds ...field.Expr) IStruct1Do
	Distinct(cols ...field.Expr) IStruct1Do
	Omit(cols ...field.Expr) IStruct1Do
	Join(table schema.Tabler, on ...field.Expr) IStruct1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IStruct1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IStruct1Do
	Group(cols ...field.Expr) IStruct1Do
	Having(conds ...gen.Condition) IStruct1Do
	Limit(limit int) IStruct1Do
	Offset(offset int) IStruct1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct1Do
	Unscoped() IStruct1Do
	Create(values ...*package1.Struct1) error
	CreateInBatches(values []*package1.Struct1, batchSize int) error
	Save(values ...*package1.Struct1) error
	First() (*package1.Struct1, error)
	Take() (*package1.Struct1, error)
	Last() (*package1.Struct1, error)
	Find() ([]*package1.Struct1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct1, err error)
	FindInBatches(result *[]*package1.Struct1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*package1.Struct1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStruct1Do
	Assign(attrs ...field.AssignExpr) IStruct1Do
	Joins(fields ...field.RelationField) IStruct1Do
	Preload(fields ...field.RelationField) IStruct1Do
	FirstOrInit() (*package1.Struct1, error)
	FirstOrCreate() (*package1.Struct1, error)
	FindByPage(offset int, limit int) (result []*package1.Struct1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStruct1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s struct1Do) Debug() IStruct1Do {
	return s.withDO(s.DO.Debug())
}

func (s struct1Do) WithContext(ctx context.Context) IStruct1Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s struct1Do) ReadDB() IStruct1Do {
	return s.Clauses(dbresolver.Read)
}

func (s struct1Do) WriteDB() IStruct1Do {
	return s.Clauses(dbresolver.Write)
}

func (s struct1Do) Session(config *gorm.Session) IStruct1Do {
	return s.withDO(s.DO.Session(config))
}

func (s struct1Do) Clauses(conds ...clause.Expression) IStruct1Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s struct1Do) Returning(value interface{}, columns ...string) IStruct1Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s struct1Do) Not(conds ...gen.Condition) IStruct1Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s struct1Do) Or(conds ...gen.Condition) IStruct1Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s struct1Do) Select(conds ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s struct1Do) Where(conds ...gen.Condition) IStruct1Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s struct1Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStruct1Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s struct1Do) Order(conds ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s struct1Do) Distinct(cols ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s struct1Do) Omit(cols ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s struct1Do) Join(table schema.Tabler, on ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s struct1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s struct1Do) RightJoin(table schema.Tabler, on ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s struct1Do) Group(cols ...field.Expr) IStruct1Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s struct1Do) Having(conds ...gen.Condition) IStruct1Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s struct1Do) Limit(limit int) IStruct1Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s struct1Do) Offset(offset int) IStruct1Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s struct1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct1Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s struct1Do) Unscoped() IStruct1Do {
	return s.withDO(s.DO.Unscoped())
}

func (s struct1Do) Create(values ...*package1.Struct1) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s struct1Do) CreateInBatches(values []*package1.Struct1, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s struct1Do) Save(values ...*package1.Struct1) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s struct1Do) First() (*package1.Struct1, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct1), nil
	}
}

func (s struct1Do) Take() (*package1.Struct1, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct1), nil
	}
}

func (s struct1Do) Last() (*package1.Struct1, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct1), nil
	}
}

func (s struct1Do) Find() ([]*package1.Struct1, error) {
	result, err := s.DO.Find()
	return result.([]*package1.Struct1), err
}

func (s struct1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct1, err error) {
	buf := make([]*package1.Struct1, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s struct1Do) FindInBatches(result *[]*package1.Struct1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s struct1Do) Attrs(attrs ...field.AssignExpr) IStruct1Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s struct1Do) Assign(attrs ...field.AssignExpr) IStruct1Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s struct1Do) Joins(fields ...field.RelationField) IStruct1Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s struct1Do) Preload(fields ...field.RelationField) IStruct1Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s struct1Do) FirstOrInit() (*package1.Struct1, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct1), nil
	}
}

func (s struct1Do) FirstOrCreate() (*package1.Struct1, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct1), nil
	}
}

func (s struct1Do) FindByPage(offset int, limit int) (result []*package1.Struct1, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s struct1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s struct1Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s struct1Do) Delete(models ...*package1.Struct1) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *struct1Do) withDO(do gen.Dao) *struct1Do {
	s.DO = *do.(*gen.DO)
	return s
}
