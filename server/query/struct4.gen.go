// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flipped-aurora/gin-vue-admin/server/model/package1"
)

func newStruct4(db *gorm.DB, opts ...gen.DOOption) struct4 {
	_struct4 := struct4{}

	_struct4.struct4Do.UseDB(db, opts...)
	_struct4.struct4Do.UseModel(&package1.Struct4{})

	tableName := _struct4.struct4Do.TableName()
	_struct4.ALL = field.NewAsterisk(tableName)
	_struct4.ID = field.NewUint(tableName, "id")
	_struct4.CreatedAt = field.NewTime(tableName, "created_at")
	_struct4.UpdatedAt = field.NewTime(tableName, "updated_at")
	_struct4.DeletedAt = field.NewField(tableName, "deleted_at")
	_struct4.Field4 = field.NewString(tableName, "field4")

	_struct4.fillFieldMap()

	return _struct4
}

type struct4 struct {
	struct4Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Field4    field.String

	fieldMap map[string]field.Expr
}

func (s struct4) Table(newTableName string) *struct4 {
	s.struct4Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s struct4) As(alias string) *struct4 {
	s.struct4Do.DO = *(s.struct4Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *struct4) updateTableName(table string) *struct4 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Field4 = field.NewString(table, "field4")

	s.fillFieldMap()

	return s
}

func (s *struct4) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *struct4) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["field4"] = s.Field4
}

func (s struct4) clone(db *gorm.DB) struct4 {
	s.struct4Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s struct4) replaceDB(db *gorm.DB) struct4 {
	s.struct4Do.ReplaceDB(db)
	return s
}

type struct4Do struct{ gen.DO }

type IStruct4Do interface {
	gen.SubQuery
	Debug() IStruct4Do
	WithContext(ctx context.Context) IStruct4Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStruct4Do
	WriteDB() IStruct4Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStruct4Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStruct4Do
	Not(conds ...gen.Condition) IStruct4Do
	Or(conds ...gen.Condition) IStruct4Do
	Select(conds ...field.Expr) IStruct4Do
	Where(conds ...gen.Condition) IStruct4Do
	Order(conds ...field.Expr) IStruct4Do
	Distinct(cols ...field.Expr) IStruct4Do
	Omit(cols ...field.Expr) IStruct4Do
	Join(table schema.Tabler, on ...field.Expr) IStruct4Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IStruct4Do
	RightJoin(table schema.Tabler, on ...field.Expr) IStruct4Do
	Group(cols ...field.Expr) IStruct4Do
	Having(conds ...gen.Condition) IStruct4Do
	Limit(limit int) IStruct4Do
	Offset(offset int) IStruct4Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct4Do
	Unscoped() IStruct4Do
	Create(values ...*package1.Struct4) error
	CreateInBatches(values []*package1.Struct4, batchSize int) error
	Save(values ...*package1.Struct4) error
	First() (*package1.Struct4, error)
	Take() (*package1.Struct4, error)
	Last() (*package1.Struct4, error)
	Find() ([]*package1.Struct4, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct4, err error)
	FindInBatches(result *[]*package1.Struct4, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*package1.Struct4) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStruct4Do
	Assign(attrs ...field.AssignExpr) IStruct4Do
	Joins(fields ...field.RelationField) IStruct4Do
	Preload(fields ...field.RelationField) IStruct4Do
	FirstOrInit() (*package1.Struct4, error)
	FirstOrCreate() (*package1.Struct4, error)
	FindByPage(offset int, limit int) (result []*package1.Struct4, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStruct4Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s struct4Do) Debug() IStruct4Do {
	return s.withDO(s.DO.Debug())
}

func (s struct4Do) WithContext(ctx context.Context) IStruct4Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s struct4Do) ReadDB() IStruct4Do {
	return s.Clauses(dbresolver.Read)
}

func (s struct4Do) WriteDB() IStruct4Do {
	return s.Clauses(dbresolver.Write)
}

func (s struct4Do) Session(config *gorm.Session) IStruct4Do {
	return s.withDO(s.DO.Session(config))
}

func (s struct4Do) Clauses(conds ...clause.Expression) IStruct4Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s struct4Do) Returning(value interface{}, columns ...string) IStruct4Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s struct4Do) Not(conds ...gen.Condition) IStruct4Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s struct4Do) Or(conds ...gen.Condition) IStruct4Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s struct4Do) Select(conds ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s struct4Do) Where(conds ...gen.Condition) IStruct4Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s struct4Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStruct4Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s struct4Do) Order(conds ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s struct4Do) Distinct(cols ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s struct4Do) Omit(cols ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s struct4Do) Join(table schema.Tabler, on ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s struct4Do) LeftJoin(table schema.Tabler, on ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s struct4Do) RightJoin(table schema.Tabler, on ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s struct4Do) Group(cols ...field.Expr) IStruct4Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s struct4Do) Having(conds ...gen.Condition) IStruct4Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s struct4Do) Limit(limit int) IStruct4Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s struct4Do) Offset(offset int) IStruct4Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s struct4Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct4Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s struct4Do) Unscoped() IStruct4Do {
	return s.withDO(s.DO.Unscoped())
}

func (s struct4Do) Create(values ...*package1.Struct4) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s struct4Do) CreateInBatches(values []*package1.Struct4, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s struct4Do) Save(values ...*package1.Struct4) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s struct4Do) First() (*package1.Struct4, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct4), nil
	}
}

func (s struct4Do) Take() (*package1.Struct4, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct4), nil
	}
}

func (s struct4Do) Last() (*package1.Struct4, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct4), nil
	}
}

func (s struct4Do) Find() ([]*package1.Struct4, error) {
	result, err := s.DO.Find()
	return result.([]*package1.Struct4), err
}

func (s struct4Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct4, err error) {
	buf := make([]*package1.Struct4, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s struct4Do) FindInBatches(result *[]*package1.Struct4, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s struct4Do) Attrs(attrs ...field.AssignExpr) IStruct4Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s struct4Do) Assign(attrs ...field.AssignExpr) IStruct4Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s struct4Do) Joins(fields ...field.RelationField) IStruct4Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s struct4Do) Preload(fields ...field.RelationField) IStruct4Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s struct4Do) FirstOrInit() (*package1.Struct4, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct4), nil
	}
}

func (s struct4Do) FirstOrCreate() (*package1.Struct4, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct4), nil
	}
}

func (s struct4Do) FindByPage(offset int, limit int) (result []*package1.Struct4, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s struct4Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s struct4Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s struct4Do) Delete(models ...*package1.Struct4) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *struct4Do) withDO(do gen.Dao) *struct4Do {
	s.DO = *do.(*gen.DO)
	return s
}
