// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flipped-aurora/gin-vue-admin/server/model/package1"
)

func newStrcut3(db *gorm.DB, opts ...gen.DOOption) strcut3 {
	_strcut3 := strcut3{}

	_strcut3.strcut3Do.UseDB(db, opts...)
	_strcut3.strcut3Do.UseModel(&package1.Strcut3{})

	tableName := _strcut3.strcut3Do.TableName()
	_strcut3.ALL = field.NewAsterisk(tableName)
	_strcut3.ID = field.NewUint(tableName, "id")
	_strcut3.CreatedAt = field.NewTime(tableName, "created_at")
	_strcut3.UpdatedAt = field.NewTime(tableName, "updated_at")
	_strcut3.DeletedAt = field.NewField(tableName, "deleted_at")
	_strcut3.Fuwenben = field.NewString(tableName, "fuwenben")
	_strcut3.Multipic = field.NewField(tableName, "multipic")

	_strcut3.fillFieldMap()

	return _strcut3
}

type strcut3 struct {
	strcut3Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Fuwenben  field.String
	Multipic  field.Field

	fieldMap map[string]field.Expr
}

func (s strcut3) Table(newTableName string) *strcut3 {
	s.strcut3Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strcut3) As(alias string) *strcut3 {
	s.strcut3Do.DO = *(s.strcut3Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strcut3) updateTableName(table string) *strcut3 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Fuwenben = field.NewString(table, "fuwenben")
	s.Multipic = field.NewField(table, "multipic")

	s.fillFieldMap()

	return s
}

func (s *strcut3) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strcut3) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["fuwenben"] = s.Fuwenben
	s.fieldMap["multipic"] = s.Multipic
}

func (s strcut3) clone(db *gorm.DB) strcut3 {
	s.strcut3Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strcut3) replaceDB(db *gorm.DB) strcut3 {
	s.strcut3Do.ReplaceDB(db)
	return s
}

type strcut3Do struct{ gen.DO }

type IStrcut3Do interface {
	gen.SubQuery
	Debug() IStrcut3Do
	WithContext(ctx context.Context) IStrcut3Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrcut3Do
	WriteDB() IStrcut3Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrcut3Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrcut3Do
	Not(conds ...gen.Condition) IStrcut3Do
	Or(conds ...gen.Condition) IStrcut3Do
	Select(conds ...field.Expr) IStrcut3Do
	Where(conds ...gen.Condition) IStrcut3Do
	Order(conds ...field.Expr) IStrcut3Do
	Distinct(cols ...field.Expr) IStrcut3Do
	Omit(cols ...field.Expr) IStrcut3Do
	Join(table schema.Tabler, on ...field.Expr) IStrcut3Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrcut3Do
	RightJoin(table schema.Tabler, on ...field.Expr) IStrcut3Do
	Group(cols ...field.Expr) IStrcut3Do
	Having(conds ...gen.Condition) IStrcut3Do
	Limit(limit int) IStrcut3Do
	Offset(offset int) IStrcut3Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrcut3Do
	Unscoped() IStrcut3Do
	Create(values ...*package1.Strcut3) error
	CreateInBatches(values []*package1.Strcut3, batchSize int) error
	Save(values ...*package1.Strcut3) error
	First() (*package1.Strcut3, error)
	Take() (*package1.Strcut3, error)
	Last() (*package1.Strcut3, error)
	Find() ([]*package1.Strcut3, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Strcut3, err error)
	FindInBatches(result *[]*package1.Strcut3, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*package1.Strcut3) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrcut3Do
	Assign(attrs ...field.AssignExpr) IStrcut3Do
	Joins(fields ...field.RelationField) IStrcut3Do
	Preload(fields ...field.RelationField) IStrcut3Do
	FirstOrInit() (*package1.Strcut3, error)
	FirstOrCreate() (*package1.Strcut3, error)
	FindByPage(offset int, limit int) (result []*package1.Strcut3, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrcut3Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strcut3Do) Debug() IStrcut3Do {
	return s.withDO(s.DO.Debug())
}

func (s strcut3Do) WithContext(ctx context.Context) IStrcut3Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strcut3Do) ReadDB() IStrcut3Do {
	return s.Clauses(dbresolver.Read)
}

func (s strcut3Do) WriteDB() IStrcut3Do {
	return s.Clauses(dbresolver.Write)
}

func (s strcut3Do) Session(config *gorm.Session) IStrcut3Do {
	return s.withDO(s.DO.Session(config))
}

func (s strcut3Do) Clauses(conds ...clause.Expression) IStrcut3Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strcut3Do) Returning(value interface{}, columns ...string) IStrcut3Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strcut3Do) Not(conds ...gen.Condition) IStrcut3Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s strcut3Do) Or(conds ...gen.Condition) IStrcut3Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s strcut3Do) Select(conds ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s strcut3Do) Where(conds ...gen.Condition) IStrcut3Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s strcut3Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStrcut3Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s strcut3Do) Order(conds ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s strcut3Do) Distinct(cols ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strcut3Do) Omit(cols ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strcut3Do) Join(table schema.Tabler, on ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strcut3Do) LeftJoin(table schema.Tabler, on ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strcut3Do) RightJoin(table schema.Tabler, on ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strcut3Do) Group(cols ...field.Expr) IStrcut3Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s strcut3Do) Having(conds ...gen.Condition) IStrcut3Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s strcut3Do) Limit(limit int) IStrcut3Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s strcut3Do) Offset(offset int) IStrcut3Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s strcut3Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrcut3Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strcut3Do) Unscoped() IStrcut3Do {
	return s.withDO(s.DO.Unscoped())
}

func (s strcut3Do) Create(values ...*package1.Strcut3) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strcut3Do) CreateInBatches(values []*package1.Strcut3, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strcut3Do) Save(values ...*package1.Strcut3) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strcut3Do) First() (*package1.Strcut3, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Strcut3), nil
	}
}

func (s strcut3Do) Take() (*package1.Strcut3, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Strcut3), nil
	}
}

func (s strcut3Do) Last() (*package1.Strcut3, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Strcut3), nil
	}
}

func (s strcut3Do) Find() ([]*package1.Strcut3, error) {
	result, err := s.DO.Find()
	return result.([]*package1.Strcut3), err
}

func (s strcut3Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Strcut3, err error) {
	buf := make([]*package1.Strcut3, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strcut3Do) FindInBatches(result *[]*package1.Strcut3, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strcut3Do) Attrs(attrs ...field.AssignExpr) IStrcut3Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strcut3Do) Assign(attrs ...field.AssignExpr) IStrcut3Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strcut3Do) Joins(fields ...field.RelationField) IStrcut3Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strcut3Do) Preload(fields ...field.RelationField) IStrcut3Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strcut3Do) FirstOrInit() (*package1.Strcut3, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Strcut3), nil
	}
}

func (s strcut3Do) FirstOrCreate() (*package1.Strcut3, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Strcut3), nil
	}
}

func (s strcut3Do) FindByPage(offset int, limit int) (result []*package1.Strcut3, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strcut3Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strcut3Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strcut3Do) Delete(models ...*package1.Strcut3) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strcut3Do) withDO(do gen.Dao) *strcut3Do {
	s.DO = *do.(*gen.DO)
	return s
}
