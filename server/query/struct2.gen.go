// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flipped-aurora/gin-vue-admin/server/model/package1"
)

func newStruct2(db *gorm.DB, opts ...gen.DOOption) struct2 {
	_struct2 := struct2{}

	_struct2.struct2Do.UseDB(db, opts...)
	_struct2.struct2Do.UseModel(&package1.Struct2{})

	tableName := _struct2.struct2Do.TableName()
	_struct2.ALL = field.NewAsterisk(tableName)
	_struct2.ID = field.NewUint(tableName, "id")
	_struct2.CreatedAt = field.NewTime(tableName, "created_at")
	_struct2.UpdatedAt = field.NewTime(tableName, "updated_at")
	_struct2.DeletedAt = field.NewField(tableName, "deleted_at")
	_struct2.Field2 = field.NewString(tableName, "field2")

	_struct2.fillFieldMap()

	return _struct2
}

type struct2 struct {
	struct2Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Field2    field.String

	fieldMap map[string]field.Expr
}

func (s struct2) Table(newTableName string) *struct2 {
	s.struct2Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s struct2) As(alias string) *struct2 {
	s.struct2Do.DO = *(s.struct2Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *struct2) updateTableName(table string) *struct2 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Field2 = field.NewString(table, "field2")

	s.fillFieldMap()

	return s
}

func (s *struct2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *struct2) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["field2"] = s.Field2
}

func (s struct2) clone(db *gorm.DB) struct2 {
	s.struct2Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s struct2) replaceDB(db *gorm.DB) struct2 {
	s.struct2Do.ReplaceDB(db)
	return s
}

type struct2Do struct{ gen.DO }

type IStruct2Do interface {
	gen.SubQuery
	Debug() IStruct2Do
	WithContext(ctx context.Context) IStruct2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStruct2Do
	WriteDB() IStruct2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStruct2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStruct2Do
	Not(conds ...gen.Condition) IStruct2Do
	Or(conds ...gen.Condition) IStruct2Do
	Select(conds ...field.Expr) IStruct2Do
	Where(conds ...gen.Condition) IStruct2Do
	Order(conds ...field.Expr) IStruct2Do
	Distinct(cols ...field.Expr) IStruct2Do
	Omit(cols ...field.Expr) IStruct2Do
	Join(table schema.Tabler, on ...field.Expr) IStruct2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IStruct2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IStruct2Do
	Group(cols ...field.Expr) IStruct2Do
	Having(conds ...gen.Condition) IStruct2Do
	Limit(limit int) IStruct2Do
	Offset(offset int) IStruct2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct2Do
	Unscoped() IStruct2Do
	Create(values ...*package1.Struct2) error
	CreateInBatches(values []*package1.Struct2, batchSize int) error
	Save(values ...*package1.Struct2) error
	First() (*package1.Struct2, error)
	Take() (*package1.Struct2, error)
	Last() (*package1.Struct2, error)
	Find() ([]*package1.Struct2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct2, err error)
	FindInBatches(result *[]*package1.Struct2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*package1.Struct2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStruct2Do
	Assign(attrs ...field.AssignExpr) IStruct2Do
	Joins(fields ...field.RelationField) IStruct2Do
	Preload(fields ...field.RelationField) IStruct2Do
	FirstOrInit() (*package1.Struct2, error)
	FirstOrCreate() (*package1.Struct2, error)
	FindByPage(offset int, limit int) (result []*package1.Struct2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStruct2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s struct2Do) Debug() IStruct2Do {
	return s.withDO(s.DO.Debug())
}

func (s struct2Do) WithContext(ctx context.Context) IStruct2Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s struct2Do) ReadDB() IStruct2Do {
	return s.Clauses(dbresolver.Read)
}

func (s struct2Do) WriteDB() IStruct2Do {
	return s.Clauses(dbresolver.Write)
}

func (s struct2Do) Session(config *gorm.Session) IStruct2Do {
	return s.withDO(s.DO.Session(config))
}

func (s struct2Do) Clauses(conds ...clause.Expression) IStruct2Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s struct2Do) Returning(value interface{}, columns ...string) IStruct2Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s struct2Do) Not(conds ...gen.Condition) IStruct2Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s struct2Do) Or(conds ...gen.Condition) IStruct2Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s struct2Do) Select(conds ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s struct2Do) Where(conds ...gen.Condition) IStruct2Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s struct2Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStruct2Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s struct2Do) Order(conds ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s struct2Do) Distinct(cols ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s struct2Do) Omit(cols ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s struct2Do) Join(table schema.Tabler, on ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s struct2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s struct2Do) RightJoin(table schema.Tabler, on ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s struct2Do) Group(cols ...field.Expr) IStruct2Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s struct2Do) Having(conds ...gen.Condition) IStruct2Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s struct2Do) Limit(limit int) IStruct2Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s struct2Do) Offset(offset int) IStruct2Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s struct2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IStruct2Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s struct2Do) Unscoped() IStruct2Do {
	return s.withDO(s.DO.Unscoped())
}

func (s struct2Do) Create(values ...*package1.Struct2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s struct2Do) CreateInBatches(values []*package1.Struct2, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s struct2Do) Save(values ...*package1.Struct2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s struct2Do) First() (*package1.Struct2, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct2), nil
	}
}

func (s struct2Do) Take() (*package1.Struct2, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct2), nil
	}
}

func (s struct2Do) Last() (*package1.Struct2, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct2), nil
	}
}

func (s struct2Do) Find() ([]*package1.Struct2, error) {
	result, err := s.DO.Find()
	return result.([]*package1.Struct2), err
}

func (s struct2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*package1.Struct2, err error) {
	buf := make([]*package1.Struct2, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s struct2Do) FindInBatches(result *[]*package1.Struct2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s struct2Do) Attrs(attrs ...field.AssignExpr) IStruct2Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s struct2Do) Assign(attrs ...field.AssignExpr) IStruct2Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s struct2Do) Joins(fields ...field.RelationField) IStruct2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s struct2Do) Preload(fields ...field.RelationField) IStruct2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s struct2Do) FirstOrInit() (*package1.Struct2, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct2), nil
	}
}

func (s struct2Do) FirstOrCreate() (*package1.Struct2, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*package1.Struct2), nil
	}
}

func (s struct2Do) FindByPage(offset int, limit int) (result []*package1.Struct2, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s struct2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s struct2Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s struct2Do) Delete(models ...*package1.Struct2) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *struct2Do) withDO(do gen.Dao) *struct2Do {
	s.DO = *do.(*gen.DO)
	return s
}
