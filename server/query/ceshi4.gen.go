// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/flipped-aurora/gin-vue-admin/server/model/ceshipackage"
)

func newCeshi4(db *gorm.DB, opts ...gen.DOOption) ceshi4 {
	_ceshi4 := ceshi4{}

	_ceshi4.ceshi4Do.UseDB(db, opts...)
	_ceshi4.ceshi4Do.UseModel(&ceshipackage.Ceshi4{})

	tableName := _ceshi4.ceshi4Do.TableName()
	_ceshi4.ALL = field.NewAsterisk(tableName)
	_ceshi4.ID = field.NewUint(tableName, "id")
	_ceshi4.CreatedAt = field.NewTime(tableName, "created_at")
	_ceshi4.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ceshi4.DeletedAt = field.NewField(tableName, "deleted_at")
	_ceshi4.Field45 = field.NewString(tableName, "field45")

	_ceshi4.fillFieldMap()

	return _ceshi4
}

type ceshi4 struct {
	ceshi4Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Field45   field.String

	fieldMap map[string]field.Expr
}

func (c ceshi4) Table(newTableName string) *ceshi4 {
	c.ceshi4Do.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c ceshi4) As(alias string) *ceshi4 {
	c.ceshi4Do.DO = *(c.ceshi4Do.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *ceshi4) updateTableName(table string) *ceshi4 {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Field45 = field.NewString(table, "field45")

	c.fillFieldMap()

	return c
}

func (c *ceshi4) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *ceshi4) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["field45"] = c.Field45
}

func (c ceshi4) clone(db *gorm.DB) ceshi4 {
	c.ceshi4Do.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c ceshi4) replaceDB(db *gorm.DB) ceshi4 {
	c.ceshi4Do.ReplaceDB(db)
	return c
}

type ceshi4Do struct{ gen.DO }

type ICeshi4Do interface {
	gen.SubQuery
	Debug() ICeshi4Do
	WithContext(ctx context.Context) ICeshi4Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICeshi4Do
	WriteDB() ICeshi4Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICeshi4Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICeshi4Do
	Not(conds ...gen.Condition) ICeshi4Do
	Or(conds ...gen.Condition) ICeshi4Do
	Select(conds ...field.Expr) ICeshi4Do
	Where(conds ...gen.Condition) ICeshi4Do
	Order(conds ...field.Expr) ICeshi4Do
	Distinct(cols ...field.Expr) ICeshi4Do
	Omit(cols ...field.Expr) ICeshi4Do
	Join(table schema.Tabler, on ...field.Expr) ICeshi4Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ICeshi4Do
	RightJoin(table schema.Tabler, on ...field.Expr) ICeshi4Do
	Group(cols ...field.Expr) ICeshi4Do
	Having(conds ...gen.Condition) ICeshi4Do
	Limit(limit int) ICeshi4Do
	Offset(offset int) ICeshi4Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICeshi4Do
	Unscoped() ICeshi4Do
	Create(values ...*ceshipackage.Ceshi4) error
	CreateInBatches(values []*ceshipackage.Ceshi4, batchSize int) error
	Save(values ...*ceshipackage.Ceshi4) error
	First() (*ceshipackage.Ceshi4, error)
	Take() (*ceshipackage.Ceshi4, error)
	Last() (*ceshipackage.Ceshi4, error)
	Find() ([]*ceshipackage.Ceshi4, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*ceshipackage.Ceshi4, err error)
	FindInBatches(result *[]*ceshipackage.Ceshi4, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*ceshipackage.Ceshi4) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICeshi4Do
	Assign(attrs ...field.AssignExpr) ICeshi4Do
	Joins(fields ...field.RelationField) ICeshi4Do
	Preload(fields ...field.RelationField) ICeshi4Do
	FirstOrInit() (*ceshipackage.Ceshi4, error)
	FirstOrCreate() (*ceshipackage.Ceshi4, error)
	FindByPage(offset int, limit int) (result []*ceshipackage.Ceshi4, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICeshi4Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c ceshi4Do) Debug() ICeshi4Do {
	return c.withDO(c.DO.Debug())
}

func (c ceshi4Do) WithContext(ctx context.Context) ICeshi4Do {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c ceshi4Do) ReadDB() ICeshi4Do {
	return c.Clauses(dbresolver.Read)
}

func (c ceshi4Do) WriteDB() ICeshi4Do {
	return c.Clauses(dbresolver.Write)
}

func (c ceshi4Do) Session(config *gorm.Session) ICeshi4Do {
	return c.withDO(c.DO.Session(config))
}

func (c ceshi4Do) Clauses(conds ...clause.Expression) ICeshi4Do {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c ceshi4Do) Returning(value interface{}, columns ...string) ICeshi4Do {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c ceshi4Do) Not(conds ...gen.Condition) ICeshi4Do {
	return c.withDO(c.DO.Not(conds...))
}

func (c ceshi4Do) Or(conds ...gen.Condition) ICeshi4Do {
	return c.withDO(c.DO.Or(conds...))
}

func (c ceshi4Do) Select(conds ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Select(conds...))
}

func (c ceshi4Do) Where(conds ...gen.Condition) ICeshi4Do {
	return c.withDO(c.DO.Where(conds...))
}

func (c ceshi4Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICeshi4Do {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c ceshi4Do) Order(conds ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Order(conds...))
}

func (c ceshi4Do) Distinct(cols ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c ceshi4Do) Omit(cols ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Omit(cols...))
}

func (c ceshi4Do) Join(table schema.Tabler, on ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Join(table, on...))
}

func (c ceshi4Do) LeftJoin(table schema.Tabler, on ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c ceshi4Do) RightJoin(table schema.Tabler, on ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c ceshi4Do) Group(cols ...field.Expr) ICeshi4Do {
	return c.withDO(c.DO.Group(cols...))
}

func (c ceshi4Do) Having(conds ...gen.Condition) ICeshi4Do {
	return c.withDO(c.DO.Having(conds...))
}

func (c ceshi4Do) Limit(limit int) ICeshi4Do {
	return c.withDO(c.DO.Limit(limit))
}

func (c ceshi4Do) Offset(offset int) ICeshi4Do {
	return c.withDO(c.DO.Offset(offset))
}

func (c ceshi4Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ICeshi4Do {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c ceshi4Do) Unscoped() ICeshi4Do {
	return c.withDO(c.DO.Unscoped())
}

func (c ceshi4Do) Create(values ...*ceshipackage.Ceshi4) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c ceshi4Do) CreateInBatches(values []*ceshipackage.Ceshi4, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c ceshi4Do) Save(values ...*ceshipackage.Ceshi4) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c ceshi4Do) First() (*ceshipackage.Ceshi4, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*ceshipackage.Ceshi4), nil
	}
}

func (c ceshi4Do) Take() (*ceshipackage.Ceshi4, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*ceshipackage.Ceshi4), nil
	}
}

func (c ceshi4Do) Last() (*ceshipackage.Ceshi4, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*ceshipackage.Ceshi4), nil
	}
}

func (c ceshi4Do) Find() ([]*ceshipackage.Ceshi4, error) {
	result, err := c.DO.Find()
	return result.([]*ceshipackage.Ceshi4), err
}

func (c ceshi4Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*ceshipackage.Ceshi4, err error) {
	buf := make([]*ceshipackage.Ceshi4, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c ceshi4Do) FindInBatches(result *[]*ceshipackage.Ceshi4, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c ceshi4Do) Attrs(attrs ...field.AssignExpr) ICeshi4Do {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c ceshi4Do) Assign(attrs ...field.AssignExpr) ICeshi4Do {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c ceshi4Do) Joins(fields ...field.RelationField) ICeshi4Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c ceshi4Do) Preload(fields ...field.RelationField) ICeshi4Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c ceshi4Do) FirstOrInit() (*ceshipackage.Ceshi4, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*ceshipackage.Ceshi4), nil
	}
}

func (c ceshi4Do) FirstOrCreate() (*ceshipackage.Ceshi4, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*ceshipackage.Ceshi4), nil
	}
}

func (c ceshi4Do) FindByPage(offset int, limit int) (result []*ceshipackage.Ceshi4, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c ceshi4Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c ceshi4Do) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c ceshi4Do) Delete(models ...*ceshipackage.Ceshi4) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *ceshi4Do) withDO(do gen.Dao) *ceshi4Do {
	c.DO = *do.(*gen.DO)
	return c
}
